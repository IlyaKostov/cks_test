import logging

from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove

from bot_app.utils import add_product_api, delete_product_api, get_products_list_api, get_price_history_api

logger = logging.getLogger(__name__)

router = Router()


class ProductStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_product_id = State()


@router.message(CommandStart())
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        'üëã <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω</b>\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/add - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n'
        '/list - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ\n'
        '/history - –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç\n'
        '/delete - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Command('add'))
async def add_product(message: Message, state: FSMContext):
    await message.answer('üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:')
    await state.set_state(ProductStates.waiting_for_url)


@router.message(ProductStates.waiting_for_url)
async def process_product_url(message: Message, state: FSMContext):
    url = message.text.strip()
    if not url.startswith(('http://', 'https://')):
        await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é URL-—Å—Å—ã–ª–∫—É')
        return

    try:
        result = await add_product_api(message.text)
        if result.get('id'):
            await message.answer(f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {result['id']}\nName: {result['name']}')
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.')
    except Exception as e:
        logger.error(f'Error adding product: {e}')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
    finally:
        await state.clear()


@router.message(Command('delete'))
async def cmd_delete_product(message: Message, state: FSMContext):
    await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
    await state.set_state(ProductStates.waiting_for_product_id)


@router.message(ProductStates.waiting_for_product_id)
async def process_delete_product(message: Message, state: FSMContext):
    try:
        product_id = int(message.text)
        success = await delete_product_api(product_id)
        if success:
            await message.answer(f'‚úÖ –¢–æ–≤–∞—Ä ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.')
    except ValueError:
        await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ç–æ–≤–∞—Ä–∞')
    except Exception as e:
        logger.exception('Error deleting product')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
    finally:
        await state.clear()


@router.message(Command('list'))
async def cmd_products_list(message: Message):
    try:
        products = await get_products_list_api()
        if not products:
            await message.answer('üì≠ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç')
            return

        response = ['üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n']

        for product in products:
            response.append(f'üÜî ID: {product['id']}\n')
            response.append(f'üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n')
            response.append(f'üîó –°—Å—ã–ª–∫–∞: {product['url']}\n')
            response.append(f'üïí –î–æ–±–∞–≤–ª–µ–Ω: {product['created_at']}\n\n')

        final_response = ''.join(response)

        await message.answer(final_response)
    except Exception as e:
        logger.exception('Error getting products list')
        await message.answer('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')


@router.message(Command('history'))
async def cmd_price_history(message: Message, state: FSMContext):
    await message.answer('üìà –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:')
    await state.set_state(ProductStates.waiting_for_product_id)


@router.message(ProductStates.waiting_for_product_id)
async def process_price_history(message: Message, state: FSMContext):
    try:
        product_id = int(message.text)
        history = await get_price_history_api(product_id)

        if not history:
            await message.answer(f'üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {product_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            return

        response = [f'üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {product_id}:\n\n']
        for entry in history:
            response.append(f'üí∞ –¶–µ–Ω–∞: {entry['price']} —Ä—É–±.\n')
            response.append(f'üïí –î–∞—Ç–∞: {entry['created_at']}\n\n')

        final_response = ''.join(response)

        await message.answer(final_response)
    except ValueError:
        await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ç–æ–≤–∞—Ä–∞')
    except Exception as e:
        logger.exception('Error getting price history')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω')
    finally:
        await state.clear()
